# -*- coding: utf-8 -*-
#
# Pymacs based Preview mode for mathematics, a replacement for
# preview-latex.
#
# Requirements:
# Emacs 24.5, but should be fine on most Emacsen
# Pymacs
# Ghostscript, install from - http://www.ghostscript.com/download/gsdnld.html
# and change the referencing it below.
# Latex - http://miktex.org/download
# 
# Installation:
# (pymacs-load "c:/Users/burak/Documents/kod/site-lisp/preview")
# (global-set-key "\M-4" 'iimage-mode) # key bindings, change it to whatever
# (global-set-key "\M-$" 'preview-show)
#
# This code does not handle inline math, between $$ inside text
# paragraphs, but line based math, between $$ .. $$ it does. The image
# for math is generated under _preview dir, and the ref to it is
# placed under math block. The result will look like
#
# %
# $$ .. $$
# %{{image.png}}
#
# The top % is needed do distinquish a block whose image is generated by preview.py. 
# Sometimes I use preview on few select blocks of an existing math text, and this
# helps to distinguish the preview'ed stuff.
#
# Inline Preview is done through iimage-mode. This mode can take a
# reference to an image and render that image inside an Emacs buffer -
# in order for iimage to know about the image, go to iimage.el comment
# out the code that sets iimage-mode-image-regex-alist. Instead use
# this
# 
# (defcustom iimage-mode-image-regex-alist 
#   `((,(concat "\\(%\n$$[[:ascii:][:nonascii:]]*?$$\n%{{\\)"
# 	      "\\(" iimage-mode-image-filename-regex "\\)"
# 	      "\\(}}\\)") . 2))
#
# do byte-compile-file.
#
from Pymacs import lisp
import re, random, shutil, os
from subprocess import Popen, PIPE, STDOUT

interactions = {}

dir = '/tmp'
if 'TEMP' in os.environ: dir = os.environ['TEMP']

template_formula = """
\\documentclass[preview]{standalone}
\\usepackage{palatino,eulervm}
\usepackage{cancel}
\\newcommand*\mlabel[1]{\\qquad (#1)}
\\usepackage{amsfonts}
\\begin{document} %s \\end{document}
"""

template_formula = template_formula.replace("\n","")

def get_block_content(start_tag, end_tag):
    remember_where = lisp.point()
    block_begin = lisp.search_backward(start_tag)
    lisp.goto_char(remember_where)
    block_end = lisp.search_forward(end_tag)
    content = lisp.buffer_substring(block_begin, block_end)
    lisp.goto_char(remember_where)
    return block_begin, block_end, content

def latex(section):
    doc = template_formula % section
    curr_dir = os.getcwd()
    os.chdir(dir); p = Popen(['pdflatex'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)
    p.communicate(input=doc)[0]
    os.system("pdf2ps standalone.pdf standalone.ps")
    os.system('"c:/Program Files/gs/gs9.18/bin/gswin32c.exe" -dGraphicsAlphaBits=4 -dSAFER -dTextAlphaBits=4 -r140 -sDEVICE=png16m -dBATCH -dNOPAUSE -sOutputFile=standalone.png standalone.ps')
    os.chdir(curr_dir)

def show():
    b,e,res = get_block_content("$$","$$")
    d = hash(res)
    foutsimple = "_preview/f-%d.png" % d
    if os.path.isfile(foutsimple): return # do nothing
    latex(res)
    curr_dir = os.path.dirname(lisp.buffer_file_name())
    prev_dir = "%s/_preview" % curr_dir
    if not os.path.isdir(prev_dir):
        os.mkdir(prev_dir)
    fout = "%s/_preview/f-%d.png" % (curr_dir,d)    
    shutil.copy(dir + "\standalone.png",fout)
    
    remem = lisp.point()
    lisp.goto_char(e)
    lisp.forward_line(1)
    lisp.beginning_of_line(); bb = lisp.point()
    lisp.end_of_line(); ee = lisp.point()
    lisp.delete_region(bb,ee)
    lisp.insert("%{{" + foutsimple + "}}")
    lisp.goto_char(remem)
    lisp.iimage_mode(1)

def genall():
    remem = lisp.point()
    lisp.beginning_of_buffer()
    res = True
    while res:
        res = lisp.re_search_forward("$$[[:ascii:][:nonascii:]]*?$$",None,lisp.t)
        lisp.backward_char(3)
        show()
    lisp.goto_char(remem)
                
interactions[show] = ''
interactions[genall] = ''
